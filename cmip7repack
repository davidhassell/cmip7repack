#!/bin/bash

# ====================================================================
#
# cmip7repack
#
# 
#
# ====================================================================
vn=0.1
release_date="2025-09-15"

iam=$0
iam_path=$(which $iam)
iam=$(basename $iam)

helpFunction()
{
    cat << EOF
NAME
    $iam - repack CMIP7 netCDF-4 datasets

SYNOPSIS
    $iam [-d size] [-h] [-o] [-v] [-x] [-z n] FILE [FILE ...]

DESCRIPTION
    For each netCDF-4 FILE, $iam will

    1) Collate all of the B-trees to a contiguous block at the start
       of the file.

    2) Rechunk the time coordinate variable, if it exists, to have a
       single compressed chunk.

    3) Rechunk the time_bounds coordinate variable, if it exists, to
       have a single compressed chunk.

    4) Optionally rechunk the leading axis of the data variable to a
       given chunk size, but only if the original chunk size is
       smaller than the new value.

    -d|--data size  Also rechunk the data variable to have the given
                    chunk size (in bytes), but only if the original
                    chunk size is smaller than the new value. Only
                    chunks along the leading axis may be changed
                    (which is usually the time axis). By default the
                    data variable is not rechunked.

    -h|--help       Display this help and exit.

    -o|--overwrite  Overwrite each original file with its repacked
                    version, if the repacking was successful. By
                    default, a new file with the suffix '_cmip7repack'
                    is created for each input file.

    -v|--version    Print version number and exit.

    -x|--dry-run    Do a dry run: Show the repacking command for each
                    file, but do not run it.

    -z|--gzip n     Specify the deflate compression level (between 1
                    and 9, default 4) for rechunked data variables.

AUTHOR
    Written by David Hassell and Ezequiel Cimadevilla.

COPYRIGHT
    Copyright Â© 2025 License BSD 3-Clause
    <https://opensource.org/license/bsd-3-clause>. This is free
    software: you are free to change and redistribute it. There is NO
    WARRANTY, to the extent permitted by law.

EOF
    exit 0
}

# --------------------------------------------------------------------
# Parse command line options
# --------------------------------------------------------------------
if [ $# -eq 0 ] ; then
    helpFunction
fi

# Defaults
gzip=4
size=false
version=false
overwrite=false
dry_run=false

while getopts ":d:hovxz:" opt; do
  case $opt in
    d) size=$OPTARG ;;
    h) helpFunction ;;
    o) overwrite=true ;;
    v) version=true ;;
    x) dry_run=true ;;
    z) gzip=$OPTARG ;;
    \?) echo "Invalid option: -$OPTARG" >&2; helpFunction ;;
    :)  echo "Option -$OPTARG requires an argument." >&2; helpFunction ;;
  esac
done
shift $((OPTIND -1))

echo "$iam: Version $vn at $iam_path"
if [ "$version" = true ]
then
    exit 0
fi

# --------------------------------------------------------------------
# Check that the HDF5 commands are available
# --------------------------------------------------------------------
h5repack_path=$(which h5repack)
if [ $? -ne 0 ]
then
    echo "$iam: ERROR: Must install h5repack to use $iam (it is usually installed as part of the netCDF library)"
    exit 2
fi
echo "$iam: $(h5repack -V) at $h5repack_path"

h5stat_path=$(which h5stat)
if [ $? -ne 0 ]
then
    echo "$iam: ERROR: Must install h5stat to use $iam (it is usually installed as part of the netCDF library)"
    exit 2
fi

h5dump_path=$(which h5dump)
if [ $? -ne 0 ]
then
    echo "$iam: ERROR: Must install h5dump to use $iam (it is usually installed as part of the netCDF library)"
    exit 2
fi


# --------------------------------------------------------------------
# Loop over input files
# --------------------------------------------------------------------
start0=`date +%s`
N=0  # Number of repacked input files
for file in $@
do
    echo ""
    echo "$iam: date-time: $(date)"
    echo "$iam: preparing to repack $file"

    # ----------------------------------------------------------------
    # Get the h5repack --metadata_block_size option
    #
    # For instance:
    #
    #  From h5stat -S output:
    #    '  File metadata: 40988486 bytes'
    #  get:
    #    --metadata_block_size=40988486
    # ----------------------------------------------------------------
    metadata=$(h5stat -S $file \
		   | sed -n -E 's/^[[:space:]]*File metadata:[[:space:]]*([0-9]+).*/\1/p')
    if [ "$metadata" != "" ]
    then
	metadata="--metadata_block_size=$metadata"
    fi
    
    # ----------------------------------------------------------------
    # Get the h5repack -l and -f options for the time variables
    #
    # For instance:
    #
    #   From h5dump output:
    #     '   DATASPACE  SIMPLE { ( 6000 ) / ( H5S_UNLIMITED ) }'
    #   get:
    #     -l /time:CHUNK=6000 -f /time:GZIP=4
    #   
    #   From h5dump output:
    #     '   DATASPACE  SIMPLE { ( 6000, 2 ) / ( H5S_UNLIMITED, 2 ) }'
    #   get:
    #     -l /time_bounds:CHUNK=6000x2 -f /time_bounds:GZIP=4
    # ----------------------------------------------------------------
    time=""
    for variable in "/time" "/time_bounds"
    do
	CHUNK=$(h5dump --dataset ${variable} --header $file 2>/dev/null \
		    | grep "DATASPACE  SIMPLE" -m 1 \
		    | sed -E 's/.*\(\s*([0-9, ]+)\s*\).*/\1/; s/[[:space:]]+//g; s/,/x/g')
	if [ "$CHUNK" != "" ]
	then
	    time="$time -l ${variable}:CHUNK=$CHUNK -f ${variable}:GZIP=$gzip"
	fi
    done
    
    # ----------------------------------------------------------------
    # Get the h5repack -l and -f options for the data variable
    # (optional)
    #
    # For instance:
    #
    #   -l /uas:CHUNK=50x143x144 -f /uas:GZIP=4
    # ----------------------------------------------------------------
    data=""
    if [ "$size" != false ]
    then
        # Find the data variable name
        variable=$(h5dump --attribute variable_id $file 2>/dev/null \
    		       | grep "(0)" -m 1 \
    		       | sed -n 's/.*"\(\w*\)"/\1/p')
        
        if [ "$variable" != "" ]
        then
            # Find number of bytes per word in the data
	    variable="/$variable"
            datatype=$(h5dump --dataset $variable --header $file 2>/dev/null \
        		   | grep "DATATYPE" -m 1)
            if [ "$(echo $datatype | grep 32)" != "" ]
            then
                wordsize=4
            else
                wordsize=8
            fi
    	    
    	    # Find the chunk shape
    	    CHUNK=""
    	    chunks=$(h5dump --dataset ${variable} --properties --header $file 2>/dev/null \
    			 | grep "CHUNKED (" -m 1 \
    			 | sed -n 's/.*(\(.*\)).*/\1/p' \
    			 | sed 's/,\s*/ /g')     
    	    chunks=($chunks)
	    
	    # Number of data dimensions
	    ndim=${#chunks[@]}
	    
	    # Iteratively change the chunk size of first (0) dimension
	    chunks[0]=$(( $size / $wordsize ))
	    n=1
	    while [ $n -lt $ndim ]
	    do
		chunks[0]=$(( ${chunks[0]} / ${chunks[$n]} ))
		n=$(( $n + 1 ))
	    done
	    
	    CHUNK=${chunks[0]}
	    if [ $CHUNK -eq 0 ]
	    then
		CHUNK=""
	    else
		n=1
		while [ $n -lt $ndim ]
		do
		    CHUNK=${CHUNK}x${chunks[$n]}
		    n=$(( $n + 1 ))
		done
	    fi
	fi
	
        if [ "$CHUNK" != "" ]
	then
	    data="-l ${variable}:CHUNK=$CHUNK -f ${variable}:GZIP=$gzip"
	fi	
    fi
    
    if [ "$metadata$time$data" = "" ]
    then
        echo "$iam: can't repack $file: Couldn't find /time, /time_bounds or data variables, nor the metadata block size"
        echo "$iam: file $file is unchanged"	
        continue	    
    fi

    # Still here? Define the repacking command
    repacked_file=${file}_cmip7repack
    command="h5repack $metadata $time $data $file $repacked_file"
    echo "$iam: repack command: $command"
    if [ "$dry_run" = true ]
    then
        echo "$iam: dry-run: not repacking"
	continue
    fi
    
    # Still here? Run the repacking command
    echo "$iam: running repack command (may take some time ...)"
    start_time=`date +%s`
    h5repack $metadata $time $data $file $repacked_file
    if [ $? -eq 0 ]
    then	
	# Successfully repacked
	end_time=`date +%s`
        N=$(( $N + 1 ))
        echo "$iam: successfully created repacked file $repacked_file in $(($end_time - $start_time)) seconds"
	if [ "$overwrite" = true ]
	then
            # Overwrite original file with repacked file
            mv_output=$(mv -v $repacked_file $file)
            echo "$iam: $mv_output"
	fi
    else
        echo "$iam: FAILED to repack $file"
        echo "$iam: file $file is unchanged"
    fi
done
end0=`date +%s`    

if [ "$dry_run" = false ]
then
    echo ""
    echo "$iam: Total of $N files repacked in $(($end0 - $start0)) seconds"
fi
