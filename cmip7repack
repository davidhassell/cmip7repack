#!/bin/bash

# ====================================================================
#
# cmip7repack
#
# ====================================================================
vn=0.1
release_date="2025-09-15"

iam=$0
iam_path=$(which $iam)
iam=$(basename $iam)

synopsis="$iam [-d size] [-h] [-o] [-v] [-x] [-z n] FILE [FILE ...]"
usage="USAGE: $synopsis"

helpFunction()
{
    cat << EOF
NAME
    $iam - repack CMIP7 netCDF-4 datasets

SYNOPSIS
    $synopsis

DESCRIPTION
    For each netCDF-4 FILE, $iam will

    * Collate all of the B-trees to a contiguous block at the start of
      the file.

    * Rechunk the time coordinate variable, if it exists, to have a
      single compressed chunk.

    * Rechunk the time_bounds coordinate variable, if it exists, to
      have a single compressed chunk.

    * OPTIONAL. Rechunk the leading axis of the data variable to a
      given chunk size if the new size is larger than the original
      data variable chunk size.

    -d size  Also rechunk the data variable to have the given
             uncompressed chunk size (in bytes), but only if the
             original uncompressed chunk size is smaller than the new
             value. The chunk shape will only be changed along the
             leading dimension of the data (which is usually the time
             axis). By default the data variable is not rechunked.

    -h       Display this help and exit.

    -o       Overwrite each original file with its repacked version,
             if the repacking was successful. By default, a new file
             with the suffix '_cmip7repack' is created for each input
             file.

    -v       Print version number and exit.

    -x       Do a dry run. Show the repacking command for each
             file, but do not run it.

    -z n     Specify the deflate compression level (between 1 and 9,
             default 4) for rechunked variables.

EXAMPLES
    Repack a file, replacing the original file with its repacked
    version:

    $ cmip7repack -o file.nc
    cmip7repack: Version 0.1 at /bin/cmip7repack
    cmip7repack: h5repack: Version 1.14.3 at /bin/h5repack
    
    cmip7repack: date-time: Wed 17 Sep 08:37:14 BST 2025
    cmip7repack: preparing to repack 'file.nc'
    cmip7repack: repack command: h5repack --metadata_block_size=877832 -l /time:CHUNK=6000 -f /time:GZIP=4 -l /time_bounds:CHUNK=6000x2 -f /time_bounds:GZIP=4 file.nc file.nc_cmip7repack
    cmip7repack: running repack command (may take some time ...)
    cmip7repack: successfully created 'file.nc_cmip7repack' in 13 seconds
    cmip7repack: renamed 'file.nc_cmip7repack' -> 'file.nc'
    
    cmip7repack: Total of 1 files repacked in 13 seconds
    $

AUTHOR
    Written by David Hassell and Ezequiel Cimadevilla.

REPORTING BUGS
    Report any bugs to
    <https://github.com/davidhassell/cmip7repack/issues>

COPYRIGHT
    Copyright Â© 2025 License BSD 3-Clause
    <https://opensource.org/license/bsd-3-clause>. This is free
    software: you are free to change and redistribute it. There is NO
    WARRANTY, to the extent permitted by law.

SEE ALSO
    h5repack(1)

EOF
    exit 0
}

# --------------------------------------------------------------------
# Parse command line options
# --------------------------------------------------------------------
if [ $# -eq 0 ]; then
    echo $usage
    exit 1
fi

# Defaults
gzip=4
size=false
version=false
overwrite=false
dry_run=false

while getopts ":d:hotvxz:" opt
do
    case $opt in
      d) size=$OPTARG 
         echo $size | grep -q "^[0-9][0-9]*$" 
         if [ $? -ne 0 ]; then
             echo "Option -d requires a numerical argument" >&2
             echo "$usage" >&2
             exit 2
         fi ;;
      h) helpFunction ;;
      o) overwrite=true ;;
      v) version=true ;;
      x) dry_run=true ;;
      z) gzip=$OPTARG
         echo $gzip | grep -q "^[1-9]$" 
         if [ $? -ne 0 ]; then
             echo "Option -z requires a numerical argument between 1 and 9" >&2
             echo "$usage" >&2
             exit 2
         fi ;;
      \?) echo -e "Invalid option: -$OPTARG\n$usage" >&2
          exit 2 ;;
      :)  echo "Option -$OPTARG requires an argument" >&2
          echo "$usage" >&2
          exit 2 ;;
    esac
done
shift $((OPTIND -1))

echo "$iam: Version $vn at $iam_path"
if [ "$version" = true ]; then
    exit 0
fi

# --------------------------------------------------------------------
# Check that the HDF5 commands are available
# --------------------------------------------------------------------
h5repack_path=$(which h5repack)
if [ $? -ne 0 ]; then
    echo "$iam: ERROR: Must install h5repack to use $iam"
    exit 3
fi
echo "$iam: $(h5repack -V) at $h5repack_path"

h5stat_path=$(which h5stat)
if [ $? -ne 0 ]; then
    echo "$iam: ERROR: Must install h5stat to use $iam"
    exit 3
fi

h5dump_path=$(which h5dump)
if [ $? -ne 0 ]; then
    echo "$iam: ERROR: Must install h5dump to use $iam"
    exit 3
fi


# --------------------------------------------------------------------
# Loop over input files
# --------------------------------------------------------------------
start0=`date +%s`
N=0  # Number of repacked input files
for file in $@
do
    echo ""
    echo "$iam: date-time: $(date)"
    echo "$iam: preparing to repack '$file'"

    # ----------------------------------------------------------------
    # Get the h5repack --metadata_block_size option
    #
    # For instance:
    #
    #  From h5stat -S output:
    #    '  File metadata: 40988486 bytes'
    #  get:
    #    --metadata_block_size=40988486
    # ----------------------------------------------------------------
    metadata=$(h5stat -S $file \
		   | sed -n -E 's/^[[:space:]]*File metadata:[[:space:]]*([0-9]+).*/\1/p')
    if [ "$metadata" != "" ]; then
	metadata="--metadata_block_size=$metadata"
    fi
    
    # ----------------------------------------------------------------
    # Get the h5repack -l and -f options for the time variables
    #
    # For instance:
    #
    #   From h5dump output:
    #     '   DATASPACE  SIMPLE { ( 6000 ) / ( H5S_UNLIMITED ) }'
    #   get:
    #     -l /time:CHUNK=6000 -f /time:GZIP=4
    #   
    #   From h5dump output:
    #     '   DATASPACE  SIMPLE { ( 6000, 2 ) / ( H5S_UNLIMITED, 2 ) }'
    #   get:
    #     -l /time_bounds:CHUNK=6000x2 -f /time_bounds:GZIP=4
    # ----------------------------------------------------------------
    time=""
    for variable in "/time" "/time_bounds"
    do
    	CHUNK=$(h5dump --dataset ${variable} --header $file 2>/dev/null \
    		    | grep "DATASPACE  SIMPLE" -m 1 \
    		    | sed -E 's/.*\(\s*([0-9, ]+)\s*\).*/\1/; s/[[:space:]]+//g; s/,/x/g')
    	if [ "$CHUNK" != "" ]; then
    	    time="$time -l ${variable}:CHUNK=$CHUNK -f ${variable}:GZIP=$gzip"
    	fi
    done
    
    # ----------------------------------------------------------------
    # Get the h5repack -l and -f options for the data variable
    # (optional)
    #
    # For instance:
    #
    #   -l /uas:CHUNK=50x143x144 -f /uas:GZIP=4
    # ----------------------------------------------------------------
    data=""
    if [ "$size" != false ]; then
        # Find the data variable name
        variable=$(h5dump --attribute variable_id $file 2>/dev/null \
    		       | grep "(0)" -m 1 \
    		       | sed -n 's/.*"\(\w*\)"/\1/p')
        
        if [ "$variable" != "" ]; then
            # Find number of bytes per word in the data
            variable="/$variable"
            datatype=$(h5dump --dataset $variable --header $file 2>/dev/null \
        		   | grep "DATATYPE" -m 1)
            if [ "$(echo $datatype | grep 32)" != "" ]; then
                wordsize=4
            else
                wordsize=8
            fi
    	    
    	    # Find the chunk shape
    	    CHUNK=""
    	    chunks=$(h5dump --dataset ${variable} --properties --header $file 2>/dev/null \
    			 | grep "CHUNKED (" -m 1 \
    			 | sed -n 's/.*(\(.*\)).*/\1/p' \
    			 | sed 's/,\s*/ /g')     
    	    chunks=($chunks)
	    
            # Number of data dimensions
            ndim=${#chunks[@]}
            
            # Iteratively reduce the size of first chunk dimension, so
            # that the final chunk size is less than or equal to the
            # given size.
            chunks[0]=$(( $size / $wordsize ))
            n=1
            while [ $n -lt $ndim ]
            do
                chunks[0]=$(( ${chunks[0]} / ${chunks[$n]} ))
                n=$(( $n + 1 ))
            done
            
            # Create an h5repack CHUNK value
            CHUNK=${chunks[0]}
            if [ $CHUNK -eq 0 ]; then
                CHUNK=""
            else
                n=1
                while [ $n -lt $ndim ]
                do
                    CHUNK=${CHUNK}x${chunks[$n]}
                    n=$(( $n + 1 ))
                done
            fi
	fi
	
        if [ "$CHUNK" != "" ]; then
            data="-l ${variable}:CHUNK=$CHUNK -f ${variable}:GZIP=$gzip"
        fi	
    fi
    
    if [ "$metadata$time$data" = "" ]; then
        echo "$iam: can't repack $file: Couldn't find /time, /time_bounds or data variables, nor the metadata block size"
        echo "$iam: file $file is unchanged"	
        continue	    
    fi

    # Still here? Define the repacking command
    repacked_file=${file}_cmip7repack
    command="h5repack $metadata $time $data $file $repacked_file"
    echo "$iam: repack command: $command"
    if [ "$dry_run" = true ]; then
        echo "$iam: dry-run: not repacking"
        continue
    fi
    
    # Still here? Run the repacking command
    echo "$iam: running repack command (may take some time ...)"
    start_time=`date +%s`
    h5repack $metadata $time $data $file $repacked_file
    if [ $? -eq 0 ]; then	
        # Successfully repacked
        end_time=`date +%s`
        N=$(( $N + 1 ))
        echo "$iam: successfully created '$repacked_file' in $(($end_time - $start_time)) seconds"
        if [ "$overwrite" = true ]; then
            # Overwrite original file with repacked file
            mv_output=$(mv -v $repacked_file $file)
            echo "$iam: $mv_output"
        fi
    else
        echo "$iam: FAILED to repack $file"
        echo "$iam: file $file is unchanged"
    fi
done
end0=`date +%s`    

if [ "$dry_run" = false ]; then
    echo ""
    echo "$iam: Total of $N files repacked in $(($end0 - $start0)) seconds"
fi
